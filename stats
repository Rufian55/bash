#!/bin/bash
#####################################################################
# Bash 4.1 script: stats 
# Author: Chris Kearns	Date: 11 Oct 2016
# Typical call: stats {-r* | -c*| [input_file]
# Piped call: 	cat [input_file] | stats {-r* | -c*} 
# CLI call:	stats {-r* | -c*} (Instructions provided)
# stats returns average and median of an int matrix of any dimension
# by row or column as specified by the user with -r* or -c* options.
#####################################################################

function cleanup() {
	if [[ -e datafile$$ ]]; then
		rm "datafile$$"
	fi
	if [[ -e tmpfile$$ ]]; then
		rm "tmpfile$$"
	fi
}

function earlyTerm() {
	cleanup
	exit 1
}

trap earlyTerm 1 2 15

function usage() {
	echo "Usage: $0 {-rows|-cols} [input_file]" 1>&2
}

function round() {
	denom="$2"
	if [[ "$denom" = "0" ]]; then
		denom="1"
	fi
	echo $((($1 + $2/2) / $denom))
}

if [[ "$#" = "0" || "$#" -ge "3" ]]; then
	usage
	exit 1
fi

if [[ "$#" = "1" && "$1" != -r* && "$1" != -c* ]]; then
	echo "Usage: $0 {-rows|-cols} [file]" 1>&2
	exit 1
fi

datafilepath="datafile$$"
tmpfile="tmpfile$$"

if [ "$#" = "1" ] && [[ "$1" == -r* ||  "$1" == -c* ]]; then
	if [ -t 0 ]; then
		cat <<EOF
 Enter your data, ints only, use TAB delimiter
 between ints, <Enter> for new line. All rows 
 should be the same length, but stats will ignore
 "empties" and still return a valid result.
 <ENTER> <Ctrl+d> to submit your data.

EOF
	fi
	cat > "$datafilepath"
else
	datafilepath=$2
fi

if [ ! -f $datafilepath ]; then
	echo "$0 reports INPUT_FILE NOT FOUND!" 1>&2
	cleanup
	exit 1
fi

if [ -r $datafilepath ]; then
	tmp="$( wc -c < ${datafilepath} )"
else
	echo "$0 reports INPUT_FILE NOT READABLE!" 1>&2
	cleanup
	exit 1
fi

if [ "$tmp" = "0" ]; then
	echo "$0 reports INPUT_FILE EMPTY!" 1>&2
	cleanup
	exit 1
fi

if [[ "$1" = -r* ]]; then
	echo -e "Average\tMedian"
	while read -a line; do
		total=0
		sum=0
		for i in "${line[@]}"; do
			((sum += $i))
			((total++))
			echo $i >> $tmpfile
		done
		medianIdx=$(($total/2+1))
		sort -n $tmpfile -o $tmpfile 
		median=$(sed "${medianIdx}q;d" $tmpfile)
		echo -e $(round $sum $total)'\t'$median
		> $tmpfile
	done < "$datafilepath"
	cleanup
elif [[ "$1" = -c* ]]; then
	j=1
	start=1
	stop="$( head -1 ${datafilepath} | wc -w)"
	medians=()
	averages=()
	while [ "$start" -le "$stop" ]; do #[13]
		sum=0
		total=0
		echo $(cut -f $j $datafilepath) | tr ' ' '\n' | sort -n >> $tmpfile
		((j++))
		while read num; do
			((total++))
			((sum += num))
		done < $tmpfile
		medianIdx=$(($total/2+1))
		median="$(sed "${medianIdx}q;d" $tmpfile) "
		medians+=$median
		if [[ "$total" -ne "0" ]]; then
			average="$(round $sum $total) "
			if [[ $average -ne "" ]]; then
				averages+=$average
			fi
		fi
		> $tmpfile
		((start++))
	done
	cleanup
	echo -e "Averages:\n$averages\nMedians:\n$medians"
else
	usage
	cleanup
	exit 1
fi

cleanup
exit 0
